@page "/employees/bookvisit/{Id:int}"
@inject HttpClient Http
@inject IEmployeeService EmployeeService
@inject IAccountService AccountService
@inject IAppointmentService AppointmentService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager

<PageTitle>Employee</PageTitle>

@if (employee == null)
{
    <p>Fetching data from the server.</p>
    <p><em>Loading...</em></p>
}
else
{
    <h4 class="card-header">@employee.Name @employee.Surname, @employee.Specialization</h4>
    <div class="card-body">
        <EditForm Model="@appointment" OnValidSubmit="OnValidSubmit">
            <div class="col-md-6 p-3">
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Choose date</RadzenText>
                    <RadzenDatePicker Min="DateTime.Today" @bind-Value=@appointment.Date DateFormat="d" Class="w-100" Change=@(args => OnChange()) />
                </RadzenCard>
            </div>
            <div class="col-md-6 p-3">
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Available hours</RadzenText>
                    <RadzenDropDown AllowClear="true" TValue="string" Class="w-100"
                                Data=@(availableHours)
                                @bind-Value=@appointment.Hour />
                </RadzenCard>
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Book
            </button>
        </EditForm>
    </div>
}
@code {
    [Parameter]
    public int Id { get; set; }

    private Employee? employee;
    private Appointment appointment = new() { Date = DateTime.Today };
    private List<string> availableHours = new();
    private bool loading;
    private DateTime? value = DateTime.Now;
    private IEnumerable<DateTime> dates = new DateTime[] { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };

    protected override async Task OnInitializedAsync()
    {
        employee = await EmployeeService.GetById(Id);
        appointment.EmployeeId = employee.Id;
        appointment.UserId = AccountService.User.Id;
        var hoursResponse = await AppointmentService.GetAvailableHours(new() { EmployeeId = employee.Id, Date = appointment.Date});
        availableHours = hoursResponse.Hours;
    }

    async Task OnChange()
    {
        var hoursResponse = await AppointmentService.GetAvailableHours(new() { EmployeeId = employee!.Id, Date = appointment.Date });
        availableHours = hoursResponse.Hours;
    }

    void DateRenderSpecial(DateRenderEventArgs args)
    {
        if (dates.Contains(args.Date))
        {
            args.Attributes.Add("style", "background-color: #ff6d41; border-color: white;");
        }
    }

    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || dates.Contains(args.Date);
    }

    void DateRenderNoWeekends(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || args.Date.DayOfWeek == DayOfWeek.Sunday || args.Date.DayOfWeek == DayOfWeek.Saturday;
    }

    void OnTodayClick()
    {
        value = DateTime.Now;
    }

    private async void OnValidSubmit()
    {
        // reset alerts on submit
        AlertService.Clear();

        loading = true;
        try
        {
            await AppointmentService.Create(appointment);
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "/employees/listall";
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}
